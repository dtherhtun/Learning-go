// Copyright © 2022 Kris Nóva <kris@nivenly.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//   ███╗   ██╗ █████╗ ███╗   ███╗██╗
//   ████╗  ██║██╔══██╗████╗ ████║██║
//   ██╔██╗ ██║███████║██╔████╔██║██║
//   ██║╚██╗██║██╔══██║██║╚██╔╝██║██║
//   ██║ ╚████║██║  ██║██║ ╚═╝ ██║███████╗
//   ╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝
//

package main

import (
	"context"
	"fmt"
	"os"

	"github.com/hexops/valast"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"

	"github.com/kris-nova/naml"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes"
)

var Version string = "0.0.1"

func main() {
	naml.Register(NewApp("AppInstance", "Application autogenerated from NAML v1.0.3"))
	err := naml.RunCommandLine()
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}

type App struct {
	naml.AppMeta
	objects []runtime.Object
}

func NewApp(name, description string) *App {
	return &App{
		AppMeta: naml.AppMeta{
			Description: description,
			ObjectMeta: metav1.ObjectMeta{
				Name:            name,
				ResourceVersion: Version,
			},
		},
	}
}

func (x *App) Install(client kubernetes.Interface) error {
	var err error

	// Adding a deployment: "asc-admin-c1"
	asc_admin_c1Deployment := &appsv1.Deployment{
		TypeMeta: metav1.TypeMeta{
			Kind:       "Deployment",
			APIVersion: "apps/appsv1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      "asc-admin-c1",
			Namespace: "upstra-next-production",
			Labels:    map[string]string{"app": "asc-admin-c1"},
			Annotations: map[string]string{
				"business_fn":               "console",
				"cluster":                   "c1",
				"moleculer/metrics_scraped": "true",
				"registry":                  "826057481178.dkr.ecr.ap-southeast-1.amazonaws.com/eko-messaging-service",
				"version":                   "4.38.0",
			},
		},
		Spec: appsv1.DeploymentSpec{
			Replicas: valast.Addr(int32(0)).(*int32),
			Selector: &metav1.LabelSelector{MatchLabels: map[string]string{
				"app": "asc-admin",
			},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"app":  "asc-admin",
						"pool": "fargate",
					},
					Annotations: map[string]string{
						"business_fn":               "console",
						"cluster":                   "c1",
						"moleculer/metrics_scraped": "true",
						"registry":                  "826057481178.dkr.ecr.ap-southeast-1.amazonaws.com/eko-messaging-service",
						"version":                   "4.38.0",
					},
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "asc-admin-c1",
							Image: "826057481178.dkr.ecr.ap-southeast-1.amazonaws.com/eko-messaging-service:4.38.0",
							Ports: []corev1.ContainerPort{
								{
									Name:          "asc-admin-c1",
									ContainerPort: 3000,
									Protocol:      corev1.Protocol("TCP"),
								},
							},
							EnvFrom: []corev1.EnvFromSource{
								{ConfigMapRef: &corev1.ConfigMapEnvSource{LocalObjectReference: corev1.LocalObjectReference{
									Name: "asc-admin-c1",
								},
								}},
								{SecretRef: &corev1.SecretEnvSource{LocalObjectReference: corev1.LocalObjectReference{Name: "neo4j-credential"}}},
							},
							LivenessProbe: &corev1.Probe{
								Handler:             corev1.Handler{Exec: &corev1.ExecAction{Command: []string{"ls"}}},
								InitialDelaySeconds: 60,
								TimeoutSeconds:      3,
								PeriodSeconds:       10,
								SuccessThreshold:    1,
								FailureThreshold:    3,
							},
							ReadinessProbe: &corev1.Probe{
								Handler:             corev1.Handler{Exec: &corev1.ExecAction{Command: []string{"ls"}}},
								InitialDelaySeconds: 60,
								TimeoutSeconds:      3,
								PeriodSeconds:       10,
								SuccessThreshold:    1,
								FailureThreshold:    3,
							},
							TerminationMessagePath:   "/dev/termination-log",
							TerminationMessagePolicy: corev1.TerminationMessagePolicy("File"),
							ImagePullPolicy:          corev1.PullPolicy("Always"),
						},
					},
					RestartPolicy:                 corev1.RestartPolicy("Always"),
					TerminationGracePeriodSeconds: valast.Addr(int64(30)).(*int64),
					DNSPolicy:                     corev1.DNSPolicy("ClusterFirst"),
					ServiceAccountName:            "adm-app-aws-service",
					DeprecatedServiceAccount:      "adm-app-aws-service",
					SecurityContext:               &corev1.PodSecurityContext{},
					Affinity:                      &corev1.Affinity{},
					SchedulerName:                 "default-scheduler",
				},
			},
			Strategy: appsv1.DeploymentStrategy{
				Type: appsv1.DeploymentStrategyType("RollingUpdate"),
				RollingUpdate: &appsv1.RollingUpdateDeployment{
					MaxUnavailable: &intstr.IntOrString{
						Type:   intstr.Type(1),
						StrVal: "0%",
					},
					MaxSurge: &intstr.IntOrString{
						Type:   intstr.Type(1),
						StrVal: "20%",
					},
				},
			},
			RevisionHistoryLimit:    valast.Addr(int32(10)).(*int32),
			ProgressDeadlineSeconds: valast.Addr(int32(600)).(*int32),
		},
	}
	x.objects = append(x.objects, asc_admin_c1Deployment)

	if client != nil {
		_, err = client.AppsV1().Deployments("upstra-next-production").Create(context.TODO(), asc_admin_c1Deployment, metav1.CreateOptions{})
		if err != nil {
			return err
		}
	}

	return err
}

func (x *App) Uninstall(client kubernetes.Interface) error {
	var err error

	if client != nil {
		err = client.AppsV1().Deployments("upstra-next-production").Delete(context.TODO(), "asc-admin-c1", metav1.DeleteOptions{})
		if err != nil {
			return err
		}
	}

	return err
}

func (x *App) Meta() *naml.AppMeta {
	return &x.AppMeta
}

func (x *App) Objects() []runtime.Object {
	return x.objects
}

